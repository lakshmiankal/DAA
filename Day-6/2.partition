def partition(arr, low, high, pivot_index):
    pivot_value = arr[pivot_index]
    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]
    store_index = low
    for i in range(low, high):
        if arr[i] < pivot_value:
            arr[store_index], arr[i] = arr[i], arr[store_index]
            store_index += 1
    arr[store_index], arr[high] = arr[high], arr[store_index]
    return store_index
def select(arr, low, high, k):
    if low == high:
        return arr[low]
    pivot_index = median_of_medians(arr, low, high)
    pivot_index = partition(arr, low, high, pivot_index)
    
    if k == pivot_index:
        return arr[k]
    elif k < pivot_index:
        return select(arr, low, pivot_index - 1, k)
    else:
        return select(arr, pivot_index + 1, high, k)

def median_of_medians(arr, low, high):
    n = high - low + 1
    if n <= 5:
        return sorted(arr[low:high + 1])[n // 2]
    
    medians = []
    for i in range(low, high + 1, 5):
        sub_right = min(i + 4, high)
        median = sorted(arr[i:sub_right + 1])[(sub_right - i + 1) // 2]
        medians.append(median)
    
    return select(medians, 0, len(medians) - 1, len(medians) // 2)

def median_of_medians_algorithm(arr, k):
    return select(arr, 0, len(arr) - 1, k - 1)


    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6, "Expected Output: 6"),
    ([23, 17, 31, 44, 55, 21, 20, 18, 19, 27], 5, "Expected Output: 20")
]
for arr, k, expected in test_cases:
    result = median_of_medians_algorithm(arr, k)
    print(f"Array: {arr}, k: {k}")
    print(f"Result: {result}, {expected}\n")

Input: Array: [23, 17, 31, 44, 55, 21, 20, 18, 19, 27], k: 5
Output: Result: 20, Expected Output: 20

