import itertools
import math
def distance(city1, city2):
    return math.sqrt((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2)
def tsp(cities):
    n = len(cities)
    if n == 0:
        return 0, []
    permutations = itertools.permutations(cities[1:])
    min_distance = float('inf')
    best_path = []
    for perm in permutations:
        current_path = [cities[0]] + list(perm) + [cities[0]]
        current_distance = 0
        for i in range(len(current_path) - 1):
            current_distance += distance(current_path[i], current_path[i + 1])
        if current_distance < min_distance:
            min_distance = current_distance
            best_path = current_path

    return min_distance, best_path
cities = [(0, 0), (1, 1), (4, 6), (8, 1), (3, 3)]
min_distance, best_path = tsp(cities)
print(f"Minimum distance: {min_distance}")
print(f"Best path: {best_path}")

Minimum distance: 20.06449510224598
Best path: [(0, 0), (1, 1), (3, 3), (4, 6), (8, 1), (0, 0)]

