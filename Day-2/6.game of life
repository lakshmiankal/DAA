def gameOfLife(board):
    if not board or not board[0]:
        return
      m, n = len(board), len(board[0])
    directions = [(-1, -1), (-1, 0), (-1, 1),
                  (0, -1),          (0, 1),
                  (1, -1), (1, 0), (1, 1)]
    def countLiveNeighbors(x, y):
        count = 0
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < m and 0 <= ny < n and abs(board[nx][ny]) == 1:
                count += 1
        return count
    for i in range(m):
        for j in range(n):
            live_neighbors = countLiveNeighbors(i, j)
            if board[i][j] == 1:  # Live cell
                if live_neighbors < 2 or live_neighbors > 3:
                    board[i][j] = -1 
            else:  # Dead cell
                if live_neighbors == 3:
                    board[i][j] = 2  
    for i in range(m):
        for j in range(n):
            if board[i][j] > 0:
                board[i][j] = 1  # Live
            else:
                board[i][j] = 0  # Dead
board1 = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]
gameOfLife(board1)
print(board1)  # Output: [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]
 # Output: [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]
board2 = [[1, 1], [1, 0]]
gameOfLife(board2)
print(board2)   

